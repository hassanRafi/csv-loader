// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	types "github.com/csv-loader/types"
	gomock "github.com/golang/mock/gomock"
)

// MockCSVLoader is a mock of CSVLoader interface.
type MockCSVLoader struct {
	ctrl     *gomock.Controller
	recorder *MockCSVLoaderMockRecorder
}

// MockCSVLoaderMockRecorder is the mock recorder for MockCSVLoader.
type MockCSVLoaderMockRecorder struct {
	mock *MockCSVLoader
}

// NewMockCSVLoader creates a new mock instance.
func NewMockCSVLoader(ctrl *gomock.Controller) *MockCSVLoader {
	mock := &MockCSVLoader{ctrl: ctrl}
	mock.recorder = &MockCSVLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVLoader) EXPECT() *MockCSVLoaderMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockCSVLoader) Store(row []*types.KeyValPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCSVLoaderMockRecorder) Store(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCSVLoader)(nil).Store), row)
}

// MockCSVExtractor is a mock of CSVExtractor interface.
type MockCSVExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockCSVExtractorMockRecorder
}

// MockCSVExtractorMockRecorder is the mock recorder for MockCSVExtractor.
type MockCSVExtractorMockRecorder struct {
	mock *MockCSVExtractor
}

// NewMockCSVExtractor creates a new mock instance.
func NewMockCSVExtractor(ctrl *gomock.Controller) *MockCSVExtractor {
	mock := &MockCSVExtractor{ctrl: ctrl}
	mock.recorder = &MockCSVExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVExtractor) EXPECT() *MockCSVExtractorMockRecorder {
	return m.recorder
}

// GetRow mocks base method.
func (m *MockCSVExtractor) GetRow() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRow")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRow indicates an expected call of GetRow.
func (mr *MockCSVExtractorMockRecorder) GetRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRow", reflect.TypeOf((*MockCSVExtractor)(nil).GetRow))
}

// MockCSVReader is a mock of CSVReader interface.
type MockCSVReader struct {
	ctrl     *gomock.Controller
	recorder *MockCSVReaderMockRecorder
}

// MockCSVReaderMockRecorder is the mock recorder for MockCSVReader.
type MockCSVReaderMockRecorder struct {
	mock *MockCSVReader
}

// NewMockCSVReader creates a new mock instance.
func NewMockCSVReader(ctrl *gomock.Controller) *MockCSVReader {
	mock := &MockCSVReader{ctrl: ctrl}
	mock.recorder = &MockCSVReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVReader) EXPECT() *MockCSVReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCSVReader) Read() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCSVReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCSVReader)(nil).Read))
}

// MockCSVGetter is a mock of CSVGetter interface.
type MockCSVGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCSVGetterMockRecorder
}

// MockCSVGetterMockRecorder is the mock recorder for MockCSVGetter.
type MockCSVGetterMockRecorder struct {
	mock *MockCSVGetter
}

// NewMockCSVGetter creates a new mock instance.
func NewMockCSVGetter(ctrl *gomock.Controller) *MockCSVGetter {
	mock := &MockCSVGetter{ctrl: ctrl}
	mock.recorder = &MockCSVGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVGetter) EXPECT() *MockCSVGetterMockRecorder {
	return m.recorder
}

// GetByKey mocks base method.
func (m *MockCSVGetter) GetByKey(key string) (*types.KeyValPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", key)
	ret0, _ := ret[0].(*types.KeyValPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockCSVGetterMockRecorder) GetByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockCSVGetter)(nil).GetByKey), key)
}
